name: Terraform Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  TERRAFORM_VERSION: 1.12.0
  TERRAFORM_WORKSPACE: dev

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        run: tflint --recursive
        working-directory: terraform

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Select or Create Workspace
        run: terraform workspace select $TERRAFORM_WORKSPACE || terraform workspace new $TERRAFORM_WORKSPACE
        working-directory: terraform

      - name: Terraform Plan
        run: |
          mkdir -p terraform/logs
          touch terraform/logs/plan.log
          terraform plan \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="client_secret=${{ secrets.CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}" \
            -out=tfplan 2>&1 | tee terraform/logs/plan.log
        working-directory: terraform
        continue-on-error: true

      - name: Terraform Apply
        run: |
          touch terraform/logs/apply.log
          terraform apply -auto-approve tfplan 2>&1 | tee terraform/logs/apply.log
          exit_code=${PIPESTATUS[0]}
          exit $exit_code
        working-directory: terraform
        continue-on-error: true

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: terraform/logs/
          if-no-files-found: ignore

      - name: Diagnóstico IA via Groq (se falhar)
        if: failure()
        id: diagnosis
        uses: rajsinghparihar/llm-code-review@v0.0.1-groq
        with:
          apiKey: ${{ secrets.GROQ_API_KEY }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          githubRepository: ${{ github.repository }}
          gitCommitHash: ${{ github.sha }}
          repoId: "llama3-70b-8192"
          temperature: "0.2"
          maxNewTokens: "256"
          logLevel: "DEBUG"
          pullRequestDiff: |
            ${{ steps.read_log.outputs.combined_log }}
          githubPullRequestNumber: ${{ github.event.pull_request.number || 0 }}

      - name: Ler conteúdo dos logs para input IA
        id: read_log
        if: failure()
        run: |
          echo "combined_log<<EOF" >> $GITHUB_OUTPUT
          cat terraform/logs/plan.log | head -n 500 >> $GITHUB_OUTPUT
          echo "----" >> $GITHUB_OUTPUT
          cat terraform/logs/apply.log | head -n 500 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Postar comentário no PR com análise IA
        if: failure() && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT_BODY="🧠 **Diagnóstico automático do erro no Terraform** 🧠\n\n${{ steps.diagnosis.outputs.review }}"
          gh pr comment $PR_NUMBER --body "$COMMENT_BODY"

  destroy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    env:
      TERRAFORM_VERSION: 1.12.0
      TERRAFORM_WORKSPACE: dev
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Select or Create Workspace
        run: terraform workspace select $TERRAFORM_WORKSPACE || terraform workspace new $TERRAFORM_WORKSPACE
        working-directory: terraform

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var="client_id=${{ secrets.CLIENT_ID }}" \
            -var="client_secret=${{ secrets.CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.TENANT_ID }}" \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}" \
            -var="ngrok_token=${{ secrets.NGROK_AUTHTOKEN }}" \
            -var="admin_public_ssh_key=${{ secrets.ADMIN_PUBLIC_SSH_KEY }}" \
            -var="admin_private_ssh_key=${{ secrets.ADMIN_PRIVATE_SSH_KEY }}"
        working-directory: terraform
